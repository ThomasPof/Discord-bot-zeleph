const { Licences } = require("../../Validation/Licences.js")
const { mainRoleId, newMemberRoleId } = require('../../config.json')

const { CommandInteraction, MessageEmbed } = require("discord.js")

module.exports = {
  name: "licence",
  description: "V√©rification du num√©ro de licence FFVL",
  options: [
    {
      name: "licence",
      description: "Renseignez votre num√©ro de licence FFVL pour rejoindre le discord des Z'√©l√©ph",
      type: "STRING",
      required: true,
    }
  ],
  /**
   *
   * @param {CommandInteraction} interaction
   */
  execute(interaction, client) {
    const { guild, options } = interaction;

    const Licence = options.getString('licence').toUpperCase();

    const Response = new MessageEmbed()

    // On v√©rifie que le r√¥le pour l'ann√©e en cours existe
    const d = new Date();
    const year = d.getFullYear();

    if(!guild.roles.cache.find(role => role.name == 'Licenci√© '+year)) {
      guild.roles.create({
        name: 'Licenci√© '+year,
        color: 'BLUE',
        reason: 'Licenci√©s '+year,
      })
    }

    const yearlyRole = guild.roles.cache.find(role => role.name == 'Licenci√© '+year)
    const pastYearlyRole = guild.roles.cache.find(role => role.name == 'Licenci√© '+(year - 1))

    const mainRole = guild.roles.cache.find(role => role.id == mainRoleId)
    const newMemberRole = guild.roles.cache.find(role => role.id == newMemberRoleId)
    const member = guild.members.cache.find(member => member.id == interaction.user.id)


    //si le membre a d√©j√† sa licence valide pour l'ann√©e
    if(member.roles.cache.some(role => role.name == 'Licenci√© '+year)) {
      Response.setColor("GREEN")
      Response.setDescription(`
        üêò Ta licence ${year} est d√©j√† valid√©e, tout est bon pour cette ann√©e.

        Bon vols !
        `
        )
      console.log(`${member.user.username } : licence d√©j√† valide`);
    } else {
      //si on trouve la licence dans la liste
      if(Licences.includes(Licence)) {
        // On ajoute les r√¥les de cette ann√©e
        member.roles.add(mainRole)
        member.roles.add(yearlyRole)
        member.roles.remove(newMemberRole)
        // on envoi le message
        Response.setColor("GREEN")
        // on supprime le r√¥le de l'an dernier
        if(member.roles.cache.some(role => role.name == 'Licenci√© '+(year - 1))) {
          member.roles.remove(pastYearlyRole)
          Response.setDescription(`
            üêò Ta licence ${year} a √©t√© valid√©e !

            Content de te retrouver aux Z\'√©l√©ph encore cette ann√©e !
            `
            )
            console.log(`${member.user.username } : licence ${Licence} re-valid√©e pour ${year}`);
        } else {
          // Si nouveau membre, message de bienvenue
          Response.setDescription(`
            üêò Bienvenue aux Z\'√©l√©ph !

            Ta licence ${year} a √©t√© valid√©e, tu as maintenant acc√®s aux salons r√©serv√©s aux membres du club.
            `
            )
          console.log(`${member.user.username } : nouvelle licence ${Licence} valid√©e pour ${year}`);
        }
      } else {
        Response.setColor("RED")
        if(member.roles.cache.some(role => role.name == 'Licenci√© '+year - 1)) {
          Response.setDescription(
            `üò± On dirait que ta licence n'est pas dans la liste de ${year}.

              Pas de panique, tu conserves tes acc√®s Discord pour le moment.

              Rapproche toi rapidement d'un des membres du comit√© pour r√©gler √ßa et ne pas perdre tes acc√®s aux salons Discord.
            `)
          console.log(`${member.user.username } : licence ${Licence} invalide pour ${year}`);
        } else {
          Response.setDescription(
            `üò± Cette licence n\'est pas connue des Z\'√©l√©ph!

            Mais pas de panique, rapproche toi d'un membre du comit√© pour que ton inscription soit prise en compte.

            En attendant, tu as quand m√™me acc√®s aux salons de base.
            `)
          console.log(`${member.user.username } : nouvelle licence ${Licence} non reconnue`);
        }
      }
    }
    interaction.reply({embeds: [Response], ephemeral: true})
  }
}
